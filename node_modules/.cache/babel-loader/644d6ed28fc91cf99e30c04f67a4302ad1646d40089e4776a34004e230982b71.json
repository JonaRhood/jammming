{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Codecademy/jammming/src/components/TokenProvider.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport AddToPlaylist from \"./Authentication\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TokenContext = /*#__PURE__*/createContext();\nfunction TokenProvider({\n  children\n}) {\n  _s();\n  const clientId = '6a18aead68cc40328197f823c5b3fb55';\n  const clientSecret = '06555bc38fae48928ff825089d1d940f';\n  const [accessToken, setAccessToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchAccessToken = async () => {\n      const params = new URLSearchParams();\n      params.append('grant_type', 'client_credentials');\n      params.append('client_id', clientId);\n      params.append('client_secret', clientSecret);\n      try {\n        const response = await fetch('https://accounts.spotify.com/api/token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: params.toString()\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        setAccessToken(data.access_token);\n        setLoading(false);\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n      }\n    };\n    fetchAccessToken();\n    const intervalId = setInterval(fetchAccessToken, 60 * 60 * 1000);\n    return () => clearInterval(intervalId);\n  }, []); // Solo ejecutar una vez al montar el componente\n\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      accessToken,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(TokenProvider, \"FjPTzRia8IlBCyg4gu7RAIZS2rs=\");\n_c = TokenProvider;\n;\nexport default TokenProvider;\nvar _c;\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","AddToPlaylist","jsxDEV","_jsxDEV","TokenContext","TokenProvider","children","_s","clientId","clientSecret","accessToken","setAccessToken","loading","setLoading","fetchAccessToken","params","URLSearchParams","append","response","fetch","method","headers","body","toString","ok","Error","statusText","data","json","access_token","error","console","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Codecademy/jammming/src/components/TokenProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport AddToPlaylist from \"./Authentication\";\n\nexport const TokenContext = createContext();\n\nfunction TokenProvider({ children }) {\n    const clientId = '6a18aead68cc40328197f823c5b3fb55';\n    const clientSecret = '06555bc38fae48928ff825089d1d940f';\n\n    const [accessToken, setAccessToken] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchAccessToken = async () => {\n            const params = new URLSearchParams();\n            params.append('grant_type', 'client_credentials');\n            params.append('client_id', clientId);\n            params.append('client_secret', clientSecret);\n\n            try {\n                const response = await fetch('https://accounts.spotify.com/api/token', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    body: params.toString()\n                });\n\n                if (!response.ok) {\n                    throw new Error('Network response was not ok ' + response.statusText);\n                }\n\n                const data = await response.json();\n                setAccessToken(data.access_token);\n                setLoading(false);\n\n            } catch (error) {\n                console.error('There was a problem with the fetch operation:', error);\n            }\n        };\n\n        fetchAccessToken();\n\n        const intervalId = setInterval(fetchAccessToken, 60 * 60 * 1000);\n\n        return () => clearInterval(intervalId);\n\n    }, []); // Solo ejecutar una vez al montar el componente\n\n    return (\n        <TokenContext.Provider value={{ accessToken, loading }}>\n            {children}\n        </TokenContext.Provider>\n    );\n};\n\nexport default TokenProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,aAAa,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAE3C,SAASO,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,YAAY,GAAG,kCAAkC;EAEvD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMc,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpCD,MAAM,CAACE,MAAM,CAAC,YAAY,EAAE,oBAAoB,CAAC;MACjDF,MAAM,CAACE,MAAM,CAAC,WAAW,EAAET,QAAQ,CAAC;MACpCO,MAAM,CAACE,MAAM,CAAC,eAAe,EAAER,YAAY,CAAC;MAE5C,IAAI;QACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACnEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEP,MAAM,CAACQ,QAAQ,CAAC;QAC1B,CAAC,CAAC;QAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,GAAGP,QAAQ,CAACQ,UAAU,CAAC;QACzE;QAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCjB,cAAc,CAACgB,IAAI,CAACE,YAAY,CAAC;QACjChB,UAAU,CAAC,KAAK,CAAC;MAErB,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACzE;IACJ,CAAC;IAEDhB,gBAAgB,CAAC,CAAC;IAElB,MAAMkB,UAAU,GAAGC,WAAW,CAACnB,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAEhE,OAAO,MAAMoB,aAAa,CAACF,UAAU,CAAC;EAE1C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACI7B,OAAA,CAACC,YAAY,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,WAAW;MAAEE;IAAQ,CAAE;IAAAN,QAAA,EAClDA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC;AAACjC,EAAA,CAjDQF,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAiDrB;AAED,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}